
/**
 * Component dependencies
 */

var sort = require('../')
  , monk = require('monk')
  , db, users;

describe('sort([e-0, e-1, ... e-n], \'1 alpha\`)', function(){
  it('should return the array sorted ASC alphabetically', function(){
    sort([
      'Gastón Gaudio',
      'Diego Forlan',
      'diego Armando Maradona',
      false,
      'Lio Mesi',
      '010 Maradona',
      'penelope',
      10,
      'Cruz'
    ], '1 alpha').should.eql([
      '010 Maradona',
      10,
      'Cruz',
      'diego Armando Maradona',
      'Diego Forlan',
      false,
      'Gastón Gaudio',
      'Lio Mesi',
      'penelope'
    ]);
  });
});

describe('sort([e-0, e-1, ..., e-n], \'1 numeric\')', function(){
  it('should return the array sorted ASC numerically', function(){
    sort([4, '2', '10.001', 10, '34', '00001', false, 0], '1 numeric')
    .should.eql([false, 0, '00001', '2', 4, 10, '10.001', '34']);
  });
});

describe('sort([e-0, e-1, ... e-n], \'-1 date\')', function(){
  it('should return the array sorted DESC by date', function(){
    var today = new Date();
    sort([
      'Tue Oct 16 2012 11:44:59 GMT-0300 (ART)',
      'Jul 18, 1977',
      today,
      'Thu, 01 Jan 1970 00:00:00 GMT-0400',
      391188883000, // Tue May 25 1982 12:34:43
      'Sun, Aug 01, 2010 17:30'
    ],  '-1 date').should.eql([
      today,
      'Tue Oct 16 2012 11:44:59 GMT-0300 (ART)',
      'Sun, Aug 01, 2010 17:30',
      391188883000, // Tue May 25 1982 12:34:43
      'Jul 18, 1977',
      'Thu, 01 Jan 1970 00:00:00 GMT-0400',
    ]);
  });
});

describe('sort([Arr-0, Arr-1, ... Arr-n], { 1: 1, 2: 1, 3: \'1 numeric\' })', function(){
  it('should return the array sorted by first name, last name and age', function(){
    sort([
      [1, 'diego',    'forlan',      8],
      [2, 'diego',    'maradona',    8],
      [3, 'matias',   'forlan',      8],
      [4, 'matias',   'maradona',    8],
      [5, 'diego',    'forlan',     45],
      [6, 'diego',    'maradona',   45],
      [7, 'matias',   'forlan',     45],
      [8, 'matias',   'maradona',   45],
    ], { 1: 1, 2: 1, 3: '1 numeric' }).should.eql([
      [1, 'diego',    'forlan',      8],
      [5, 'diego',    'forlan',     45],
      [2, 'diego',    'maradona',    8],
      [6, 'diego',    'maradona',   45],
      [3, 'matias',   'forlan',      8],
      [7, 'matias',   'forlan',     45],
      [4, 'matias',   'maradona',    8],
      [8, 'matias',   'maradona',   45],
    ]);
  });
});

describe('sort([Obj-0, Obj-1, ... Obj-n], { last: -1, name: 1, age: \'-1 numeric\' })', function(){
  it('should return the array sorted by first name, last name and age', function(){
    sort([
      { n: 1, name: 'diego',  last: 'forlan',   age: 8 },
      { n: 2, name: 'matias', last: 'forlan',   age: 8 },
      { n: 3, name: 'diego',  last: 'maradona', age: 8 },
      { n: 4, name: 'matias', last: 'maradona', age: 8 },
      { n: 5, name: 'diego',  last: 'forlan',   age: 35 },
      { n: 6, name: 'matias', last: 'forlan',   age: 35 },
      { n: 7, name: 'diego',  last: 'maradona', age: 35 },
      { n: 8, name: 'matias', last: 'maradona', age: 35 },
    ], { last: -1, name: 1, age: '-1 numeric' }).should.eql([
      { n: 7, name: 'diego',  last: 'maradona', age: 35 },
      { n: 3, name: 'diego',  last: 'maradona', age: 8 },
      { n: 8, name: 'matias', last: 'maradona', age: 35 },
      { n: 4, name: 'matias', last: 'maradona', age: 8 },
      { n: 5, name: 'diego',  last: 'forlan',   age: 35 },
      { n: 1, name: 'diego',  last: 'forlan',   age: 8 },
      { n: 6, name: 'matias', last: 'forlan',   age: 35 },
      { n: 2, name: 'matias', last: 'forlan',   age: 8 },
    ]);
  });
});

describe('sort([Obj-0, Obj-1, ... Obj-n], { ... })', function(){
  it('should return the array sorted identical to mongodb sorting', function(done){
    db = monk('127.0.0.1/mongo-query');
    users = db.get('users');
    users.drop();

    // Initial data
    function getData() {
      return [
        { n: 1, name: 'diego',    last: 'forlan',   age: 8,   d: new Date('Jul 18, 1977') },
        { n: 2, name: 'matias',   last: 'forlan',   age: 8,   d: new Date('Jul 18, 1977') },
        { n: 3, name: 'diego',    last: 'maradona', age: 8,   d: new Date('Jul 18, 1977') },
        { n: 4, name: 'matias',   last: 'maradona', age: 8,   d: new Date('Jul 18, 1977') },
        { n: 5, name: 'diego',    last: 'forlan',   age: 35,  d: new Date('Jul 18, 1977') },
        { n: 6, name: 'matias',   last: 'forlan',   age: 35,  d: new Date('Jul 18, 1977') },
        { n: 7, name: 'diego',    last: 'maradona', age: 35,  d: new Date('Jul 18, 1977') },
        { n: 8, name: 'matias',   last: 'maradona', age: 35,  d: new Date('Jul 18, 1977') },

        { n:  9, name: 'diego',    last: 'forlan',   age: 8,  d: new Date('Jul 11, 2000') },
        { n: 10, name: 'matias',   last: 'forlan',   age: 8,  d: new Date('Jul 11, 2000') },
        { n: 11, name: 'diego',    last: 'maradona', age: 8,  d: new Date('Jul 11, 2000') },
        { n: 12, name: 'matias',   last: 'maradona', age: 8,  d: new Date('Jul 11, 2000') },
        { n: 13, name: 'diego',    last: 'forlan',   age: 35, d: new Date('Jul 11, 2000') },
        { n: 14, name: 'matias',   last: 'forlan',   age: 35, d: new Date('Jul 11, 2000') },
        { n: 15, name: 'diego',    last: 'maradona', age: 35, d: new Date('Jul 11, 2000') },
        { n: 16, name: 'matias',   last: 'maradona', age: 35, d: new Date('Jul 11, 2000') },
      ];
    }

    // Add data to mongodb
    var init = getData();
    var c = init.length;
    init.forEach(function(user){
      users.insert(user, function(err, user){
        --c || compare();
      });
    });

    function compare(){
      var mongoQuery = { sort: { last: 1, name: 1, age: -1, d: -1 } };
      var sortQuery = { last: 1, name: 1, age: '-1 numeric', d: '-1 date' };

      // get sorted data from mongodb
      users.find({}, mongoQuery, function(err, dbdata){
        for (var i = 0; i < dbdata.length; i++) { delete dbdata[i]['_id']; }
        sort(getData(), sortQuery).should.eql(dbdata)
        done();
      });
    }
  });
});

describe('sort([e-0, e-1, ... e-n], \'-1 roman\`)', function(){
  it('should return the array sorted by roman numeric format', function(){
    sort.add('roman', require('deromanize-component'));
    sort(['X', 'V', 'IX', 'XIV'], '-1 roman').should.eql(['XIV', 'X', 'IX', 'V']);
  });
});
