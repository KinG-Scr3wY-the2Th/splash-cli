
/**
 * Component dependencies
 */

var type = require('type-component')
  , slugize = require('slugize-component')
  , dot = require('dot-component');

/**
 * Expose `Sort`
 */

exports = module.exports = Sort;

/**
 * Sort function
 *
 * @param {Array} arr array to sort
 * @param {Object|String} by
 * @return {Array} sorted array
 */

function Sort(arr, by){
  return arr.sort(function(v0, v1){
    var condition;
    if ('object' == type(by)) {
      for (var selector in by) {
        condition = compare(v0, v1, by[selector], selector);
        if (condition !== 0) break;
      }
    } else {
      by = by || '1';
      condition = compare(v0, v1, by, false);
    }
    return condition;
  });
}

/**
 * compare v0 with v1 values
 *
 * @param {String|Number|Date} v0
 * @param {String|Number|Date} v1
 * @param {String} prps sorting properties
 * @param {String} selector dot selector
 * @return {Number} 1 | -1 | 0
 * @api private
 */

function compare(v0, v1, prps, selector){
  prps = String(prps).split(' ');
  var c0 = selector === false ? v0 : dot.get(v0, selector);
  var c1 = selector === false ? v1 : dot.get(v1, selector);

  if (prps[1]) {
    c0 = (exports.convert[prps[1]] || convert[prps[1]])(c0);
    c1 = (exports.convert[prps[1]] || convert[prps[1]])(c1);
  }

  return (c0 > c1 ? 1 : (c0 < c1 ? - 1 : 0)) * Number(prps[0]);
}

/**
 * Convert functions container.
 * Return the given value typed.
 */

var convert = {
  numeric: function(v){ return Number(v); },
  alpha: function(v){ return slugize(String(v)); },
  date: function(v){ return new Date('number' == type(v) ? v : Date.parse(v)); }
};

/**
 * Custom converter functions object
 */

var publics = exports.convert = {};

/**
 * Add custom type converter
 *
 * @param {String} name
 * @param {Function} fn
 */

exports.add = function(name, fn){
  publics[name] = fn;
};
